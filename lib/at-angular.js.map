{"version":3,"sources":["at-angular.ts"],"names":["at","at.attachInjects","at.getOrCreateModule","at.inject","at.injectMethod","at.service","at.provider","at.filter","at.filter.Provider","at.filter.Provider.constructor","at.valueObj","at.valueProp","at.valueFunc","at.constantObj","at.constantProp","at.constantFunc","at.controller","at.component","at.directive"],"mappings":"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","file":"at-angular.js","sourcesContent":["/// <reference path=\"../typings/main.d.ts\"/>\r\n\r\nmodule at {\r\n\r\n    'use strict';\r\n\r\n    /* tslint:disable:no-any */\r\n    export interface IClassAnnotationDecorator {\r\n        (target: any): void;\r\n        (t: any, key: string, index: number): void;\r\n    }\r\n\r\n    export interface IPropertyAnnotationDecorator {\r\n        (target: any, key: string): void;\r\n    }\r\n\r\n    export interface IMethodAnnotationDecorator {\r\n        (target: any, key: string, descriptor: TypedPropertyDescriptor<any>): void;\r\n    }\r\n\r\n    export function attachInjects(target: any, ...args: any[]): any {\r\n        (target.$inject || []).forEach((item: string, index: number) => {\r\n            target.prototype[(item.charAt(0) === '$' ? '$' : '$$') + item] = args[index];\r\n        });\r\n        return target;\r\n    }\r\n\r\n    /**\r\n     * return a module. If module doesn't exist it will be created\r\n     */\r\n    export function getOrCreateModule(moduleName: string, requires: string[] = []): angular.IModule {\r\n        let mod: angular.IModule;\r\n        try {\r\n            mod = angular.module(moduleName);\r\n        } catch (ex) {\r\n            mod = angular.module(moduleName, requires);\r\n        }\r\n\r\n        return mod;\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // INJECT ANNOTATION\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n\r\n    export interface IInjectAnnotation {\r\n        (...args: any[]): IClassAnnotationDecorator;\r\n    }\r\n\r\n    /**\r\n     * inject an argument\r\n     */\r\n    export function inject(...args: string[]): at.IClassAnnotationDecorator {\r\n        return (target: any, key?: string, index?: number): void => {\r\n            if (angular.isNumber(index)) {\r\n                target.$inject = target.$inject || [];\r\n                target.$inject[index] = args[0];\r\n            } else {\r\n                target.$inject = args;\r\n            }\r\n        };\r\n    }\r\n\r\n    export function injectMethod(...args: string[]): at.IMethodAnnotationDecorator {\r\n        return (target: any, key: string, descriptor: TypedPropertyDescriptor<any>): void => {\r\n            target[key].$inject = args;\r\n        };\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // SERVICE ANNOTATION\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n\r\n    export interface IServiceAnnotation {\r\n        (moduleName: string, serviceName: string): IClassAnnotationDecorator;\r\n    }\r\n\r\n    /**\r\n     * inject a service\r\n     */\r\n    export function service(moduleName: string, serviceName: string): at.IClassAnnotationDecorator {\r\n        return (target: any): void => {\r\n            getOrCreateModule(moduleName).service(serviceName, target);\r\n        };\r\n\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // PROVIDER ANNOTATION\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n\r\n    export interface IProviderAnnotation {\r\n        (moduleName: string, providerName: string): IClassAnnotationDecorator;\r\n    }\r\n\r\n    /**\r\n     * inject a provider\r\n     */\r\n    export function provider(moduleName: string, providerName: string): at.IClassAnnotationDecorator {\r\n        return (target: any): void => {\r\n            getOrCreateModule(moduleName).provider(providerName, target);\r\n        };\r\n\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // FILTER ANNOTATION\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n\r\n    export interface IFilter {\r\n        transform(input: any, ...args: any[]): any;\r\n    }\r\n\r\n    export interface IFilterAnnotation {\r\n        (moduleName: string, filterName: string): IClassAnnotationDecorator;\r\n    }\r\n\r\n    /**\r\n     * inject a provider\r\n     */\r\n    export function filter(moduleName: string, filterName: string): at.IClassAnnotationDecorator {\r\n        return (target: any): void => {\r\n            class Provider {\r\n                constructor() {\r\n                    this.$get.$inject = (target.$inject || []).slice();\r\n                }\r\n                public $get = (...deps: any[]) => new target(...deps).transform;\r\n            }\r\n            getOrCreateModule(moduleName).provider(filterName + 'Filter', Provider);\r\n        };\r\n\r\n    }\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // VALUE ANNOTATION\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n\r\n    export interface IValueAnnotation {\r\n        (moduleName: string, valueName: string): IClassAnnotationDecorator;\r\n    }\r\n\r\n    export function valueObj(moduleName: string, valueName: string): at.IClassAnnotationDecorator {\r\n        return (target: any): void => {\r\n            getOrCreateModule(moduleName).value(valueName, target);\r\n        };\r\n    }\r\n\r\n    export function valueProp(moduleName: string, valueName?: string): at.IPropertyAnnotationDecorator {\r\n        return (target: any, key: string): void => {\r\n            getOrCreateModule(moduleName).value(valueName || key, target[key]);\r\n        };\r\n    }\r\n\r\n    export function valueFunc(moduleName: string, valueName?: string): at.IMethodAnnotationDecorator {\r\n        return (target: any, key: string, descriptor: TypedPropertyDescriptor<any>): void => {\r\n            getOrCreateModule(moduleName).value(valueName || key, target[key]);\r\n        };\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // CONSTANT ANNOTATION\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n\r\n    export interface IConstantAnnotation {\r\n        (moduleName: string, valueName: string): IClassAnnotationDecorator;\r\n    }\r\n\r\n    export function constantObj(moduleName: string, valueName: string): at.IClassAnnotationDecorator {\r\n        return (target: any): void => {\r\n            getOrCreateModule(moduleName).constant(valueName, target);\r\n        };\r\n    }\r\n\r\n    export function constantProp(moduleName: string, valueName?: string): at.IPropertyAnnotationDecorator {\r\n        return (target: any, key: string): void => {\r\n            getOrCreateModule(moduleName).constant(valueName || key, target[key]);\r\n        };\r\n    }\r\n\r\n    export function constantFunc(moduleName: string, valueName?: string): at.IMethodAnnotationDecorator {\r\n        return (target: any, key: string, descriptor: TypedPropertyDescriptor<any>): void => {\r\n            getOrCreateModule(moduleName).constant(valueName || key, target[key]);\r\n        };\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // CONTROLLER ANNOTATION\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n\r\n    /**\r\n     * @link http://angular.github.io/router/lifecycle\r\n     */\r\n    export interface IController {\r\n        canActivate?(): boolean | angular.IPromise<boolean>;\r\n        activate?(): any;\r\n        canDeactivate?(): boolean | angular.IPromise<boolean>;\r\n        deactivate?(): any;\r\n    }\r\n\r\n    export interface IControllerAnnotation {\r\n        (moduleName: string, ctrlName: string): IClassAnnotationDecorator;\r\n    }\r\n\r\n    /**\r\n     * Inject a controller\r\n     */\r\n    export function controller(moduleName: string, ctrlName: string): at.IClassAnnotationDecorator {\r\n        return (target: any): void => {\r\n            getOrCreateModule(moduleName).controller(ctrlName, target);\r\n        };\r\n\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // COMPONENT ANNOTATION\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n\r\n    export interface IComponent {\r\n        $onInit?(): void;\r\n    }\r\n\r\n    const componentProperties: string[] = [\r\n        'controller',\r\n        'controllerAs',\r\n        'bindings',\r\n        'require',\r\n        'template',\r\n        'templateUrl',\r\n        'transclude'\r\n    ];\r\n\r\n    export interface IComponentAnnotation {\r\n        (moduleName: string, componentName: string): IClassAnnotationDecorator;\r\n    }\r\n\r\n    /**\r\n     * inject a component\r\n     */\r\n    export function component(moduleName: string, componentName: string, componentConfig?: angular.IComponentOptions): at.IClassAnnotationDecorator {\r\n        return (target: any): void => {\r\n            let config: angular.IComponentOptions;\r\n\r\n            if (componentConfig) {\r\n                componentConfig.controller || (componentConfig.controller = target);\r\n                config = componentConfig;\r\n            } else {\r\n                config = componentProperties.reduce((\r\n                    config: angular.IComponentOptions,\r\n                    property: string\r\n                ) => {\r\n                    return angular.isDefined(target[property]) ?\r\n                        angular.extend(config, { [property]: target[property] }) :\r\n                        config;\r\n                }, { controller: target });\r\n            }\r\n\r\n            getOrCreateModule(moduleName).component(componentName, config);\r\n        };\r\n    }\r\n\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    // DIRECTIVE ANNOTATION\r\n    ///////////////////////////////////////////////////////////////////////////////\r\n    const directiveProperties: string[] = [\r\n        'compile',\r\n        'controller',\r\n        'controllerAs',\r\n        'bindToController',\r\n        'link',\r\n        'priority',\r\n        'replace',\r\n        'require',\r\n        'restrict',\r\n        'scope',\r\n        'template',\r\n        'templateUrl',\r\n        'terminal',\r\n        'transclude'\r\n    ];\r\n\r\n    export interface IDirectiveAnnotation {\r\n        (moduleName: string, directiveName: string): IClassAnnotationDecorator;\r\n    }\r\n\r\n    /**\r\n     * inject a directive\r\n     */\r\n    export function directive(moduleName: string, directiveName: string, directiveConfig?: angular.IDirective): at.IClassAnnotationDecorator {\r\n        return (target: any): void => {\r\n            const ctrlCfg = directiveConfig ? directiveConfig.controller : target.controller;\r\n            let ctrlAs: string = directiveConfig ? directiveConfig.controllerAs : target.controllerAs;\r\n            if (ctrlCfg) {\r\n                const ctrlName: string = angular.isString(ctrlCfg) ? ctrlCfg.split(' ').shift() : null;\r\n                /* istanbul ignore else */\r\n                if (ctrlName) {\r\n                    controller(moduleName, ctrlName)(target);\r\n                }\r\n            } else {\r\n                directiveConfig && (directiveConfig.controller = target);\r\n            }\r\n            if (!ctrlAs) {\r\n                ctrlAs = angular.isString(ctrlCfg) ? ctrlCfg.split(' ').pop() : null;\r\n                if (!ctrlAs) {\r\n                    if (directiveConfig) {\r\n                        directiveConfig.controllerAs = 'vm';\r\n                    } else {\r\n                        target.controllerAs = 'vm';\r\n                    }\r\n                }\r\n            }\r\n\r\n            let config: angular.IDirective;\r\n            if (directiveConfig) {\r\n                config = directiveConfig;\r\n            } else {\r\n                config = directiveProperties.reduce((\r\n                    config: angular.IDirective,\r\n                    property: string\r\n                ) => {\r\n                    return angular.isDefined(target[property]) ? angular.extend(config, { [property]: target[property] }) :\r\n                        config; /* istanbul ignore next */\r\n                }, { controller: target, scope: Boolean(target.templateUrl) });\r\n            }\r\n\r\n            getOrCreateModule(moduleName).directive(directiveName, () => (config));\r\n        };\r\n    }\r\n    /* tslint:enable:no-any */\r\n\r\n}\r\n"],"sourceRoot":"/source/"}